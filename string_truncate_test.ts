// Copyright 2023 the NextRJ organization. All rights reserved. MIT license.
import { assertStrictEquals } from "./deps.ts"
import { truncate } from "./string.ts"

Deno.test(function truncateEmptyString() {
  const source = ""

  // default truncate by max-byte-length
  assertStrictEquals(truncate(source, -1), "")
  assertStrictEquals(truncate(source, 0), "")
  assertStrictEquals(truncate(source, 1), "")

  // truncate by max-code-point-length
  assertStrictEquals(truncate(source, -1, { byByte: false }), "")
  assertStrictEquals(truncate(source, 0, { byByte: false }), "")
  assertStrictEquals(truncate(source, 1, { byByte: false }), "")
})

Deno.test(function truncateSingleByteString() {
  const source = "12"

  // default truncate by max-byte-length
  assertStrictEquals(truncate(source, -1), "")
  assertStrictEquals(truncate(source, 0), "")
  assertStrictEquals(truncate(source, 1), "1")
  assertStrictEquals(truncate(source, 2), "12")
  assertStrictEquals(truncate(source, 3), "12")

  // truncate by max-code-point-length
  assertStrictEquals(truncate(source, -1, { byByte: false }), "")
  assertStrictEquals(truncate(source, 0, { byByte: false }), "")
  assertStrictEquals(truncate(source, 1, { byByte: false }), "1")
  assertStrictEquals(truncate(source, 2, { byByte: false }), "12")
  assertStrictEquals(truncate(source, 3, { byByte: false }), "12")
})

Deno.test(function truncateTwoByteString() {
  const source = "zÂ±" // z = 1 byte, Â± = 2 bytes"

  // default truncate by max-byte-length
  assertStrictEquals(truncate(source, -1), "")
  assertStrictEquals(truncate(source, 0), "")
  assertStrictEquals(truncate(source, 1), "z")
  assertStrictEquals(truncate(source, 2), "z")
  assertStrictEquals(truncate(source, 3), "zÂ±")
  assertStrictEquals(truncate(source, 4), "zÂ±")

  // truncate by max-code-point-length
  assertStrictEquals(truncate(source, -1, { byByte: false }), "")
  assertStrictEquals(truncate(source, 0, { byByte: false }), "")
  assertStrictEquals(truncate(source, 1, { byByte: false }), "z")
  assertStrictEquals(truncate(source, 2, { byByte: false }), "zÂ±")
  assertStrictEquals(truncate(source, 3, { byByte: false }), "zÂ±")
})

Deno.test(function truncateThreeByteString() {
  const source = "zä¸­" // z = 1 byte, ä¸­ = 3 bytes"

  // default truncate by max-byte-length
  assertStrictEquals(truncate(source, -1), "")
  assertStrictEquals(truncate(source, 0), "")
  assertStrictEquals(truncate(source, 1), "z")
  assertStrictEquals(truncate(source, 2), "z")
  assertStrictEquals(truncate(source, 3), "z")
  assertStrictEquals(truncate(source, 4), "zä¸­")
  assertStrictEquals(truncate(source, 5), "zä¸­")

  // truncate by max-code-point-length
  assertStrictEquals(truncate(source, -1, { byByte: false }), "")
  assertStrictEquals(truncate(source, 0, { byByte: false }), "")
  assertStrictEquals(truncate(source, 1, { byByte: false }), "z")
  assertStrictEquals(truncate(source, 2, { byByte: false }), "zä¸­")
  assertStrictEquals(truncate(source, 3, { byByte: false }), "zä¸­")
})

Deno.test(function truncateFourByteString() {
  const source = "zðŸ¦„" // z = 1 byte, ðŸ¦„ = 4 bytes"

  // default truncate by max-byte-length
  assertStrictEquals(truncate(source, -1), "")
  assertStrictEquals(truncate(source, 0), "")
  assertStrictEquals(truncate(source, 1), "z")
  assertStrictEquals(truncate(source, 2), "z")
  assertStrictEquals(truncate(source, 3), "z")
  assertStrictEquals(truncate(source, 4), "z")
  assertStrictEquals(truncate(source, 5), "zðŸ¦„")
  assertStrictEquals(truncate(source, 6), "zðŸ¦„")

  // truncate by max-code-point-length
  assertStrictEquals(truncate(source, -1, { byByte: false }), "")
  assertStrictEquals(truncate(source, 0, { byByte: false }), "")
  assertStrictEquals(truncate(source, 1, { byByte: false }), "z")
  assertStrictEquals(truncate(source, 2, { byByte: false }), "zðŸ¦„")
  assertStrictEquals(truncate(source, 3, { byByte: false }), "zðŸ¦„")
  assertStrictEquals(truncate(source, 4, { byByte: false }), "zðŸ¦„")
})
